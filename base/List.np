import base/Opt.np;

type List(a) = {
    Cons(a, List(a)),
    Empty(),
}

head(list: List(a)): Opt(a) {
    match (list) {
        Cons(x, _) => Just(x),
        _ => None,
    }
}

tail(list: List(a)): Opt(List(a)) {
    match (list) {
        Cons(_, xs) => Just(xs),
        _ => None,
    }
}

last(list: List(a)): Opt(a) {
    let mut l = list;

    while (True) {
        match (l) {
            Cons(a, Empty) => {
                return Just(a);
            },
            Cons(_, next) => {
                l = next;
            },
            _ => {
                return None;
            },
        };
    }

    None
}

io main() {
    match (last(Cons(10, Cons(20, Empty)))) {
        Just(x) => {
            let x = 100;
            print(showInt(x));
        },
        _ => (),
    };
}
